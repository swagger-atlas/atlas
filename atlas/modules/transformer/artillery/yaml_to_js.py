from io import open
import json
import os
import re
import yaml

from atlas.conf import settings
from atlas.modules import utils


BOOL_MAP = {
    False: "false",
    True: "true"
}


class Converter:
    """
    Converts YAML file to JS file.
    This helps in reducing file read at runtime
    This also reduces the need for libraries needed to parse YAML in thread load

    Files Converted:
        profiles.yaml ->  profiles.js
        Resource Files generated by Data Generator are initialized in resources.js
    """

    def __init__(self):
        self.profiles = []
        self.path = utils.get_project_path()

    def convert_profiles(self):
        """
        Convert Profiles YAML to profiles.js
        """

        _file = os.path.join(self.path, settings.INPUT_FOLDER, settings.PROFILES_FILE)
        with open(_file) as yaml_file:
            data = yaml.safe_load(yaml_file)

        _credential_file = os.path.join(self.path, settings.INPUT_FOLDER, settings.CREDENTIALS_FILE)
        try:
            with open(_credential_file) as yaml_file:
                cred_data = yaml.safe_load(yaml_file) or {}
        except FileNotFoundError:
            cred_data = {}

        self.profiles = data.keys()

        for key, value in data.items():
            value.update(cred_data.get(key, {}))

        out_data = "exports.profiles = {};\n".format(json.dumps(data, indent=4))

        out_file = os.path.join(
            self.path, settings.OUTPUT_FOLDER, settings.ARTILLERY_FOLDER, settings.ARTILLERY_LIB_FOLDER,
            settings.ARTILLERY_PROFILES
        )

        with open(out_file, 'w') as js_file:
            js_file.write(out_data)

    def get_resources(self):
        """
        Generate JS Code Snippet for resources
        """

        _dir = os.path.join(self.path, settings.OUTPUT_FOLDER, settings.RESOURCES_FOLDER)

        profile_data = []

        indent_width = 2
        indent = ' ' * 4 * indent_width

        for profile in self.profiles:
            _file = os.path.join(_dir, profile + ".yaml")
            with open(_file) as yaml_file:
                data = yaml.safe_load(yaml_file)
            profile_data.append(self.update_statements(profile, data, indent))

        return f"\n{indent}".join(profile_data)

    def convert_resources(self):
        """
        Write the code for resources.js and initialize the build-time resources
        """

        in_file = os.path.join(
            settings.BASE_DIR, "atlas", "modules", "data_provider", "artillery", settings.ARTILLERY_RESOURCES
        )

        with open(in_file) as in_data:
            contents = in_data.read()

        out_data = re.sub("let dynamicResources;", self.get_resources(), contents)

        out_file = os.path.join(
            self.path, settings.OUTPUT_FOLDER, settings.ARTILLERY_FOLDER, settings.ARTILLERY_LIB_FOLDER,
            settings.ARTILLERY_RESOURCES
        )

        with open(out_file, 'w') as js_file:
            js_file.write(out_data)

    @staticmethod
    def update_statements(profile, data, indent):
        """
        Convert the resources into Update Statements
        Assumption being that Resources are a single level dict, with each value being set
        """
        out_data = [
            f"this.updateResource('{profile}', '{key}', new Set({list(value)}));" for key, value in data.items()
            if value
        ]
        return f"\n{indent}".join(out_data)

    def convert(self):
        self.convert_profiles()
        self.convert_resources()
