from io import open
import os

from atlas.modules import utils, constants, exceptions
from atlas.conf import settings


class FileConfig:
    """
    Input:
        ./models.TaskSet
        Swagger Specs

    Do:
        Takes TaskSet, and make sure that the load test generated by is packaged in a proper configuration
        Usually this means adding in required import statements, global declarations etc
        Once, it has generated all the required inputs, it writes them to required location

    Output:
        Load test configuration written to requisite files

    Sub-classes need to define OUT_FILE and get_imports statements at minimum.
    They can over-ride others as necessary

    Entry Point:
        convert() method
    """

    # Required. Tells where to write the configuration for load test
    OUT_FILE = None

    def __init__(self, task_set, specs=None):
        self.task_set = task_set
        self.specs = specs or {}

    def get_imports(self):
        """
        Import statements required by Load test to generate configuration
        """
        raise NotImplementedError

    def get_global_vars(self):
        return ""

    def convert(self):
        file_components = [
            self.get_imports(),
            self.get_global_vars(),
            self.task_set.convert(width=1)
        ]
        return "\n\n".join([component for component in file_components if component])

    def write_to_file(self, file_name=None, sub_path=None):
        """
        Write to OUT_FILE the generated configuration.
        If generating data for more than one file, over-ride this method as necessary
        """
        file_name = file_name or self.OUT_FILE
        _path = os.path.join(utils.get_project_path(), settings.OUTPUT_FOLDER)

        if sub_path:
            _path = os.path.join(_path, sub_path)

        _file = os.path.join(_path, file_name)

        with open(_file, 'w') as write_file:
            write_file.write(self.convert() + "\n")  # Append EOF New line

    def get_swagger_url(self):
        """
        Utility Method to add swagger URL defaults if missing in configuration.

        Swagger base url is decided on this priority:
            1. From Custom User settings (in conf/conf.py)
            2. From Swagger Configuration
            3. Default values, wherever possible
        """

        protocol = settings.SERVER_URL.get('protocol')
        if not protocol:
            schemes = self.specs.get(constants.SCHEMES, [])
            protocol = schemes[0] if schemes else "http"

        host = settings.SERVER_URL.get('host')
        if not host:
            host = self.specs.get(constants.HOST, "localhost")

        api_url = settings.SERVER_URL.get('api_url')
        if not api_url:
            api_info = self.specs.get(constants.INFO, {})
            api_url = api_info.get(constants.API_URL, self.specs.get(constants.BASE_PATH, ""))

        if api_url and host:
            # Check that either API URL starts with / or host ends with /

            if api_url.startswith("/") and host.endswith("/"):
                raise exceptions.ImproperSwaggerException(f"Base URL is {host}{api_url} - Is this correct?")

            if not api_url.startswith("/") and not host.endswith("/"):
                raise exceptions.ImproperSwaggerException(f"Base URL is {host}{api_url} - Is this correct?")

        return f"{protocol}://{host}{api_url}"
